import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet

# -----------------
# 1. Load & Clean Data
# -----------------
file_path = "household_power_consumption.csv"
df = pd.read_csv(file_path, sep=",", low_memory=False)

# Combine Date + Time into datetime
df['Datetime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], format='%d/%m/%Y %H:%M:%S')

# Convert numeric columns
num_cols = ['Global_active_power', 'Global_reactive_power', 'Voltage',
            'Global_intensity', 'Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3']
for col in num_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Set datetime index
df.set_index('Datetime', inplace=True)

# Resample to hourly mean
df_hourly = df.resample('H').mean()

# Drop NA
df_hourly = df_hourly.dropna()

# -----------------
# 2. Feature Engineering
# -----------------
df_hourly['hour'] = df_hourly.index.hour
df_hourly['dayofweek'] = df_hourly.index.dayofweek
df_hourly['is_weekend'] = (df_hourly['dayofweek'] >= 5).astype(int)

# Target variable
target = 'Global_active_power'

# Train-test split
train_size = int(len(df_hourly) * 0.8)
train, test = df_hourly.iloc[:train_size], df_hourly.iloc[train_size:]

# -----------------
# 3. ARIMA Model
# -----------------
arima_model = ARIMA(train[target], order=(2,1,2))
arima_fit = arima_model.fit()
arima_forecast = arima_fit.forecast(steps=len(test))

# -----------------
# 4. Prophet Model
# -----------------
prophet_df = train[[target]].reset_index().rename(columns={"Datetime": "ds", target: "y"})
prophet_model = Prophet()
prophet_model.fit(prophet_df)
future = prophet_model.make_future_dataframe(periods=len(test), freq='H')
forecast = prophet_model.predict(future)
prophet_forecast = forecast.set_index('ds').loc[test.index]['yhat']

# -----------------
# 5. XGBoost Model
# -----------------
features = ['hour', 'dayofweek', 'is_weekend']

X_train, X_test = train[features], test[features]
y_train, y_test = train[target], test[target]

xgb_model = XGBRegressor(objective='reg:squarederror', n_estimators=100)
xgb_model.fit(X_train, y_train)
xgb_forecast = xgb_model.predict(X_test)

# -----------------
# 6. Evaluation
# -----------------
def evaluate(y_true, y_pred, model_name):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    print(f"{model_name} -> MAE: {mae:.3f}, RMSE: {rmse:.3f}")

print("\nModel Performance:")
evaluate(test[target], arima_forecast, "ARIMA")
evaluate(test[target], prophet_forecast, "Prophet")
evaluate(test[target], xgb_forecast, "XGBoost")

# -----------------
# 7. Visualization
# -----------------
plt.figure(figsize=(12,6))
plt.plot(test.index, test[target], label='Actual', color='black')
plt.plot(test.index, arima_forecast, label='ARIMA Forecast', alpha=0.7)
plt.plot(test.index, prophet_forecast, label='Prophet Forecast', alpha=0.7)
plt.plot(test.index, xgb_forecast, label='XGBoost Forecast', alpha=0.7)
plt.legend()
plt.title("Energy Consumption Forecasting")
plt.xlabel("Time")
plt.ylabel("Global Active Power (kW)")
plt.show()                                                                                                                                             
